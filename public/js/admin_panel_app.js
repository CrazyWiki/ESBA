document.addEventListener('DOMContentLoaded', () => {
    const tableSelector = document.getElementById('tableSelector');
    const tableContainer = document.getElementById('adminDynamicTableContainer');
    const addRowBtn = document.getElementById('adminAddNewRowBtn');
    const messageArea = document.getElementById('adminUserMessageArea');

    let currentActiveTable = '';
    let currentTableColumns = [];
    let currentTablePrimaryKey = '';

    const PREDEFINED_ADMIN_ROLES = ['Administrador', 'Conductor', 'Gerente de ventas'];

    function displayAdminMessage(text, type = 'success') {
        messageArea.innerHTML = `<div class="admin-user-message admin-type-${type}">${escapeHtml(text)}</div>`;
        setTimeout(() => { messageArea.innerHTML = ''; }, 7000);
    }

    fetch('php_scripts/list_tables.php')
        .then(response => {
            if (!response.ok) return response.json().then(err => { throw new Error(err.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`) });
            return response.json();
        })
        .then(data => {
            if (data.success && data.tables && data.tables.length > 0) {
                tableSelector.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É --</option>';
                data.tables.forEach(tableName => {
                    const option = document.createElement('option');
                    option.value = tableName; // –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –µ—Å—Ç—å –∏–∑ –ë–î (–º–æ–∂–µ—Ç –±—ã—Ç—å 'administradores')
                    option.textContent = tableName;
                    tableSelector.appendChild(option);
                });
            } else {
                tableSelector.innerHTML = '<option value="">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã</option>';
                displayAdminMessage(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü.', 'error');
            }
        })
        .catch(error => {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü:', error);
            tableSelector.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
            displayAdminMessage(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (—Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü): ${error.message}`, 'error');
        });

    tableSelector.addEventListener('change', function() {
        currentActiveTable = this.value; // –ó–¥–µ—Å—å –±—É–¥–µ—Ç 'administradores' –µ—Å–ª–∏ —Ç–∞–∫ –ø—Ä–∏—à–ª–æ –∏–∑ list_tables.php
        if (currentActiveTable) {
            fetchAndRenderTable(currentActiveTable);
            addRowBtn.classList.remove('admin-hidden');
        } else {
            tableContainer.innerHTML = '<p class="admin-info-text">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.</p>';
            addRowBtn.classList.add('admin-hidden');
            currentTableColumns = [];
            currentTablePrimaryKey = '';
        }
    });

    function fetchAndRenderTable(tableName) {
        tableContainer.innerHTML = '<p class="admin-info-text">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã...</p>';
        fetch(`php_scripts/load_table.php?table=${encodeURIComponent(tableName)}`)
            .then(response => {
                if (!response.ok) return response.json().then(err => { throw new Error(err.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`) });
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    currentTableColumns = data.columns;
                    currentTablePrimaryKey = data.primaryKey;
                    renderHtmlTableUI(data.columns, data.rows, data.primaryKey);
                } else {
                    displayAdminMessage(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.', 'error');
                    tableContainer.innerHTML = `<p class="admin-info-text admin-type-error">${escapeHtml(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.')}</p>`;
                }
            })
            .catch(error => {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã "${tableName}":`, error);
                displayAdminMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã "${tableName}": ${error.message}`, 'error');
                tableContainer.innerHTML = `<p class="admin-info-text admin-type-error">–û—à–∏–±–∫–∞: ${escapeHtml(error.message)}</p>`;
            });
    }

    function renderHtmlTableUI(columnsMeta, rowsData, pkField) {
        console.log("Rendering table for:", currentActiveTable, "PK:", pkField);
        console.log("Columns Meta:", columnsMeta);

        if (!columnsMeta || columnsMeta.length === 0) {
            tableContainer.innerHTML = '<p class="admin-info-text">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.</p>';
            return;
        }

        let tableHtml = '<table class="admin-data-display-table"><thead><tr>';
        columnsMeta.forEach(colMeta => {
            tableHtml += `<th>${escapeHtml(colMeta.Field)} ${colMeta.Field === pkField ? '<span class="pk-marker">(PK)</span>' : ''}</th>`;
        });
        tableHtml += '<th>–î–µ–π—Å—Ç–≤–∏—è</th></tr></thead><tbody>';

        const activeTableLower = currentActiveTable.toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        rowsData.forEach(row => {
            const pkValue = row[pkField];
            const isNewUnsavedRow = pkValue === null || pkValue === undefined;

            tableHtml += `<tr data-pk-value="${pkValue ? escapeHtml(pkValue) : ''}">`;

            columnsMeta.forEach(colMeta => {
                const columnName = colMeta.Field; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –ë–î
                const columnNameLower = columnName.toLowerCase(); // –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                let cellValue = row[columnName];
                let cellInteriorHtml = '';
                let tdAttributes = `data-td-for-column="${escapeHtml(columnName)}"`;
                const isPKAndAutoIncrement = (columnName === pkField) && colMeta.Extra && colMeta.Extra.toLowerCase().includes('auto_increment');
                let isContentEditable = !isPKAndAutoIncrement;

                if (activeTableLower === 'administradores') {
                    if (columnNameLower === 'role') { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        console.log(`Rendering 'role' column for 'administradores'. Current value: ${cellValue}`);
                        let selectHtml = `<select data-column-name="${escapeHtml(columnName)}" class="admin-role-select">`;
                        PREDEFINED_ADMIN_ROLES.forEach(role => {
                            selectHtml += `<option value="${escapeHtml(role)}" ${cellValue === role ? 'selected' : ''}>${escapeHtml(role)}</option>`;
                        });
                        selectHtml += `</select>`;
                        cellInteriorHtml = selectHtml;
                        isContentEditable = false; 
                    } else if (columnNameLower === 'password') { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        console.log("Rendering 'password' column for 'administradores'.");
                        cellInteriorHtml = isNewUnsavedRow ? '' : '********';
                        isContentEditable = true; 
                        tdAttributes += ` data-column-name="${escapeHtml(columnName)}"`;
                    }
                }
                
                if (!cellInteriorHtml) {
                    cellInteriorHtml = (cellValue !== null && cellValue !== undefined) ? escapeHtml(cellValue) : '';
                    if (isContentEditable) {
                        tdAttributes += ` data-column-name="${escapeHtml(columnName)}"`;
                    }
                }
                tableHtml += `<td ${tdAttributes} ${isContentEditable ? 'contenteditable="true"' : ''}>${cellInteriorHtml}</td>`;
            });

            tableHtml += `<td class="admin-row-action-buttons">
                            <button class="admin-save-button" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è">üíæ</button>
                            <button class="admin-delete-button" title="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É">üóëÔ∏è</button>
                         </td>`;
            tableHtml += '</tr>';
        });

        tableHtml += '</tbody></table>';
        tableContainer.innerHTML = tableHtml;
    }
    
    function escapeHtml(unsafeText) {
        if (unsafeText === null || typeof unsafeText === 'undefined') return '';
        return String(unsafeText).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }

    addRowBtn.addEventListener('click', () => {
        if (!currentActiveTable) {
            displayAdminMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É.', 'error');
            return;
        }
        fetch('php_scripts/add_row.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ table: currentActiveTable })
        })
        .then(response => {
            if (!response.ok) return response.json().then(err => { throw new Error(err.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${response.status}`) });
            return response.json();
        })
        .then(data => {
            if (data.success) {
                displayAdminMessage(data.message || '–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ.');
                fetchAndRenderTable(currentActiveTable);
            } else {
                displayAdminMessage(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É.', 'error');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏:', error);
            displayAdminMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: ${error.message}`, 'error');
        });
    });

    tableContainer.addEventListener('click', function(event) {
        const targetButton = event.target.closest('button');
        if (!targetButton) return;

        const tableRowElement = targetButton.closest('tr');
        if (!tableRowElement) return;

        const pkValueForRow = tableRowElement.dataset.pkValue;

        if (targetButton.classList.contains('admin-save-button')) {
            const rowDataObject = {};
            let isNewPasswordEntered = false;
            console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏. PK:", pkValueForRow, "–¢–∞–±–ª–∏—Ü–∞:", currentActiveTable);

            const activeTableLowerForSave = currentActiveTable.toLowerCase(); // –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

            tableRowElement.querySelectorAll('td[contenteditable="true"][data-column-name], select[data-column-name]').forEach(inputElement => {
                const columnName = inputElement.dataset.columnName; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
                const columnNameLowerForSave = columnName.toLowerCase(); // –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                let value;

                if (inputElement.tagName === 'SELECT') {
                    value = inputElement.value;
                } else { 
                    value = inputElement.textContent;
                }
                
                console.log(`–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –ö–æ–ª–æ–Ω–∫–∞ '${columnName}', –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: '${value}'`);

                if (activeTableLowerForSave === 'administradores' && columnNameLowerForSave === 'password') {
                    console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –ü–ê–†–û–õ–¨ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã administradores. –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", value);
                    if (value.trim() !== '' && value.trim() !== '********') { // –î–æ–±–∞–≤–∏–ª trim() –∏ –¥–ª—è '********'
                        rowDataObject[columnName] = value.trim(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                        isNewPasswordEntered = true;
                        console.log("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ isNewPasswordEntered = true. –ü–∞—Ä–æ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", value.trim());
                    } else {
                        console.log("–ü–∞—Ä–æ–ª—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è (–ø—É—Å—Ç–æ –∏–ª–∏ '********').");
                    }
                } else {
                    rowDataObject[columnName] = value;
                }
            });
            
            if (!rowDataObject[currentTablePrimaryKey] && pkValueForRow !== undefined && pkValueForRow !== '') {
                 rowDataObject[currentTablePrimaryKey] = pkValueForRow;
            }
            console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", JSON.stringify(rowDataObject)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            console.log("isNewPasswordProvided —Ñ–ª–∞–≥:", isNewPasswordEntered);


            fetch('php_scripts/save_row.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    table: currentActiveTable,
                    pkField: currentTablePrimaryKey,
                    data: rowDataObject,
                    isNewPasswordProvided: isNewPasswordEntered // –≠—Ç–æ—Ç —Ñ–ª–∞–≥ –∫—Ä–∏—Ç–∏—á–µ–Ω
                })
            })
            .then(response => {
                if (!response.ok) return response.json().then(err => { throw new Error(err.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${response.status}`) });
                return response.json();
            })
            .then(data => {
                console.log("–û—Ç–≤–µ—Ç –æ—Ç save_row.php:", data);
                if (data.success) {
                    displayAdminMessage(data.message || '–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
                    targetButton.style.backgroundColor = 'lightgreen';
                    setTimeout(() => { targetButton.style.backgroundColor = ''; }, 2000);
                    
                    if (activeTableLowerForSave === 'administradores' && isNewPasswordEntered) {
                        const passwordCell = tableRowElement.querySelector('td[data-column-name="password"], td[data-td-for-column="password"]'); // –£—Ç–æ—á–Ω–∏–ª —Å–µ–ª–µ–∫—Ç–æ—Ä
                        if (passwordCell) {
                            passwordCell.textContent = '********';
                        }
                    }
                } else {
                    displayAdminMessage(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É.', 'error');
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏:', error);
                displayAdminMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`, 'error');
            });
        }

        if (targetButton.classList.contains('admin-delete-button')) {
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å PK '${pkValueForRow}' –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '${currentActiveTable}'?`)) {
                fetch('php_scripts/delete_row.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        table: currentActiveTable,
                        pkField: currentTablePrimaryKey,
                        id: pkValueForRow
                    })
                })
                .then(response => {
                    if (!response.ok) return response.json().then(err => { throw new Error(err.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${response.status}`) });
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        displayAdminMessage(data.message || '–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
                        tableRowElement.remove();
                    } else {
                        displayAdminMessage(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É.', 'error');
                    }
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏:', error);
                    displayAdminMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${error.message}`, 'error');
                });
            }
        }
    });
});